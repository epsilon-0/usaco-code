/*
ID: mathgen2
PROG: castle
LANG: C++11
*/
#include <bits/stdc++.h>

using namespace std;

const int MAXN = 51;

int m, n;
int grid[MAXN][MAXN];
int visited[MAXN][MAXN];
int dx[] = {0, -1, 0, 1};
int dy[] = {-1, 0, 1, 0};

int getDFS(int x, int y){
  if(x < 0 || x >= m || y < 0 || y >= n) return 0;
  if(visited[x][y] != 0) return 0;
  visited[x][y] = 1;
  int ans = 1;
  for(int p = 0; p < 4; p++)
    if((grid[x][y] & 1<<p) == 0)
      ans += getDFS(x+dx[p], y+dy[p]);
  return ans;
}

void setDFS(int x, int y){

}

int main(){
  ifstream fin("castle.in");
  ofstream fout("castle.out");
  fin >> m >> n;
  for(int i = 0; i < m; i++)
    for(int j = 0; j < m; j++)
      fin >> grid[i][j];
  cout << getDFS(0, 2) << endl;
}
